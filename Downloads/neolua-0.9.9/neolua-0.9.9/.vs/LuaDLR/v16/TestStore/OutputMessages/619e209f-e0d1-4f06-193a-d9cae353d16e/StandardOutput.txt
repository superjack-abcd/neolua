Test: local lst = clr.System.Collections.Generic.List[clr.System.Object]();

lst:Add(1);
lst:Add(2);
lst:Add("String");

print("Enum:");
foreach a in lst do
  print(a);
end;

print("Index:");
for i = 0,lst.Count-1,1 do
  print(i .. ": " .. lst[i]);
end;

return lst.Count;
==================================================================
.Lambda test<System.Func`2[Neo.IronLua.LuaTable,Neo.IronLua.LuaResult]>(Neo.IronLua.LuaTable $_G) {
    .Block(System.Object $lst) {
        $lst = (.New Neo.IronLua.LuaResult(.Dynamic Invoke(.Dynamic GetIndex(
                    .Dynamic GetMember List(.Dynamic GetMember Generic(.Dynamic GetMember Collections(.Dynamic GetMember System((System.Object)Neo.IronLua.LuaType.Clr)
                            ))),
                    .Dynamic GetMember Object(.Dynamic GetMember System((System.Object)Neo.IronLua.LuaType.Clr)))))).Item[0];
        .Dynamic Call Add(
            $lst,
            (System.Object)1);
        .Dynamic Call Add(
            $lst,
            (System.Object)2);
        .Dynamic Call Add(
            $lst,
            (System.Object)"String");
        .Dynamic Invoke(
            .Dynamic GetMember print((System.Object)$_G),
            (System.Object)"Enum:");
        .Block(
            System.Collections.IEnumerable $#enumerable,
            System.Collections.IEnumerator $#enumerator,
            System.Object $a) {
            $#enumerable = $lst .As System.Collections.IEnumerable;
            .If ($#enumerable == null) {
                .Throw .New Neo.IronLua.LuaRuntimeException(
                    "Expression is not enumerable.",
                    null)
            } .Else {
                .Default(System.Void)
            };
            $#enumerator = .Call $#enumerable.GetEnumerator();
            .Label
            .LabelTarget #continue:;
            .If (
                .Call $#enumerator.MoveNext()
            ) {
                .Default(System.Void)
            } .Else {
                .Goto #break { }
            };
            .Block(System.Object $a) {
                $a = $#enumerator.Current;
                .Dynamic Invoke(
                    .Dynamic GetMember print((System.Object)$_G),
                    $a)
            };
            .Goto #continue { };
            .Label
            .LabelTarget #break:
        };
        .Dynamic Invoke(
            .Dynamic GetMember print((System.Object)$_G),
            (System.Object)"Index:");
        .Block(
            System.Object $#var,
            System.Object $#end,
            System.Int32 $#step) {
            $#var = (System.Object)0;
            $#end = .Dynamic BinaryOperation Subtract(
                .Dynamic GetMember Count($lst),
                (System.Object)1);
            $#step = 1;
            .Label
            .LabelTarget #loop:;
            .If (
                .Block(System.Boolean $#tmp) {
                    $#tmp = .Block(System.Boolean $#tmp) {
                        $#tmp = $#step > 0;
                        .If (
                            $#tmp
                        ) {
                            .Dynamic Convert System.Boolean(.Dynamic BinaryOperation LessThanOrEqual(
                                    $#var,
                                    $#end))
                        } .Else {
                            $#tmp
                        }
                    };
                    .If (
                        $#tmp
                    ) {
                        $#tmp
                    } .Else {
                        .Block(System.Boolean $#tmp) {
                            $#tmp = $#step <= 0;
                            .If (
                                $#tmp
                            ) {
                                .Dynamic Convert System.Boolean(.Dynamic BinaryOperation GreaterThanOrEqual(
                                        $#var,
                                        $#end))
                            } .Else {
                                $#tmp
                            }
                        }
                    }
                }
            ) {
                .Block(System.Object $i) {
                    $i = $#var;
                    .Dynamic Invoke(
                        .Dynamic GetMember print((System.Object)$_G),
                        (System.Object).Call Neo.IronLua.Lua.RtConcatString(.NewArray System.Object[] {
                                $i,
                                (System.Object)": ",
                                .Dynamic GetIndex(
                                    $lst,
                                    $i)
                            }))
                }
            } .Else {
                .Goto #break { }
            };
            .Label
            .LabelTarget #continue:;
            $#var = .Dynamic BinaryOperation Add(
                $#var,
                (System.Object)$#step);
            .Goto #loop { };
            .Label
            .LabelTarget #break:
        };
        .Goto #return { .New Neo.IronLua.LuaResult(.Dynamic GetMember Count($lst)) };
        .Label
            Neo.IronLua.LuaResult.Empty
        .LabelTarget #return:
    }
}
===============================================================================
Enum:
1
2
String
Index:
0: 1
1: 2
2: String
OK: (Int32)3 == (Int32)3
  Dauer: 15ms


